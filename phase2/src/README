README 
# *the imposter summit* (Phase 2)

# Usage
**NOTE** Some Java.Swing elements are incompatible with Mac OS (such as problems with decoding unicode characters and
rendering the JList cells ('unread' button)). Windows OS is recommended for usage.

To use the imposter summit, navigate to the GUI folder, and then the Main folder.
Then run the MainSystem class.
Follow the instructions on the window to complete your desired actions.
*To sign up as an Organizer, use the Organizer code: AmongUs

*To login as a Speaker or a VIP, you must first create the respective accounts while logged-in as an Organizer.
(They cannot be created from the sign-up menu)

*Only Organizers are able to create events. Do so by navigating to Manage Events --> Add Event and enter the details
about the event.

*In the Events menu option, please enter a valid date (must be after the current date and time and in a valid format)
when entering the date to sort a list of events.

*Organizers can sign up for any events created (including VIP events and events they’ve added themselves)

*To add a contact, navigate to contacts --> add and enter the username in the box that appears below.
This must be done before sending a message to a user.

*To send a message, select a contact to message under contact and click 'send msg'. Enter the message in the box and
click 'send' once you have typed in the message you want to send.

*In the Inbox menu option, click on the top right icon on the inbox panel to navigate to 'archive' to see the messages
you have archived.
Click on the button to the left of archive to view all your received messages from this sender.

*An event's maximum capacity can only be done by an Organizer account. Navigate to Event --> Manage Events, select an
event and click on Edit. The capacity of an event can only be decreased if the new capacity is at least the number of
people signed up for the event.

*To broadcast a message to people signed up to an event, ensure that you are logged in as a Speaker or Organizer.
Navigate to event --> Manage Event, select an event you want to broadcast a message to, and click the envelope icon.
You will then be prompted to enter the content of your message and press OK when finished.

## Contributors
Alex, Ayah, Eric, Hala, Nitin, Olivia, Raiyaan and Tariq (Group 0301).

## Implemented Features
- All mandatory extensions
- Optional features
   -> Implemented a GUI using Java.Swing to replace the text UI.

   -> Allow users to delete, reply to, archive or unread messages after reading them.

   -> Users also have access to an inbox ‘archive’ where they can unarchive archived messages.

   -> Program produces a neatly formatted schedule of the events in the conference that allows users to sort the
   schedule by speaker or date. Users can also sort their signed-up events by the same filters.

   -> Added VIP Attendees, who have exclusive access to VIP events. VIP Attendee accounts can only be created by
   Organizers.

   -> Allow Organizers to edit an event by changing the maximum capacity of an event. Organizers can only decrease the
   maximum capacity if no signed-up Attendees will be affected by the change.

- Our own feature:
   -> A password strength checker that evaluates the strength of a user’s password when they sign up. It does not allow
   a user with a weak password to sign up. (Used source 1)

## Design Patterns
- Iterator: We semi-implemented this pattern in InfoFileGateway which implements IGateway2. IGateway2 extends
Iterator<String> since we’re iterating over strings in a .txt file, so we chose not to implement a specific Iterable in
this pattern. InfoFileGateway overrides the next() and hasNext() Iterator methods to suit it for file reading.

- Strategy: We have multiple filter classes that differ only in their behaviour, since we use different versions of an
algorithm. This includes the AttendeeFilter, DateFilter, OrganizerFilter, etc. We separated the implementation of the
class from the implementations of the algorithms. All the filters implement the EventFiler interface.

- Builder: All the GUIs utilise a Builder class to build the JPanels associated with each GUI (the ‘Director’ objects)
to decouple the creation and formatting of the different Panels.

- Dependency Injection: We implement this pattern to maintain one single running instance of each GUI / Controller,
instantiated in MainGUI, MainMenuGUI and LoginSystem (e.g. We pass the same instance of EventManagementSystem to
EventAttendeeGUI, EventSpeakerGUI and EventOrganizerGUI.) This pattern is also used in the Use Case layer (e.g. we
inject a MessageCollection into the constructor for MessageManager).

- Factory: EventFilterFactory obscures the creation process of different EventFilters, where it contains all the
constructor calls for DateFilter, AttendeeFilter, NullFilter, OrganizerFilter and SpeakerFilter based on the desired
filtering method.

## Sources
1. https://www.geeksforgeeks.org/how-to-validate-a-password-using-regular-expressions-in-java/
